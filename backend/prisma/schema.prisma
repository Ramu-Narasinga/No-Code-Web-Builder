// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int        @id @default(autoincrement())
  firstName          String     @db.VarChar(255)
  lastName           String     @db.VarChar(255)
  email              String     @db.VarChar(255) @unique
  password           String     @db.VarChar(255)
  emails             Email[]
  websites           Website[]
  visitorActivities  VisitorActivity[]
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
}

enum Status {
  DRAFT
  ACTIVE
}

enum ActivityType {
  ERROR
  FEEDBACK
}

model Email {
  id              Int        @id @default(autoincrement())
  title           String     @db.VarChar(255)
  description     String     @db.VarChar(255)
  status          Status     @default(ACTIVE)
  html            String     @db.Text
  css             String     @db.Text
  user            User?      @relation(fields: [userId], references: [id])
  userId          Int?
  emailMeta       EmailMeta?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
}

model EmailMeta {
  id              Int         @id @default(autoincrement())
  subject         String      @db.Text
  recipients      Recipient[]
  email           Email       @relation(fields: [emailId], references: [id], onDelete: Cascade)
  emailId         Int         @unique
}

model Recipient {
  id                 Int           @id @default(autoincrement())
  emailMeta          EmailMeta?    @relation(fields: [emailMetaId], references: [id], onDelete: Cascade)
  emailMetaId        Int?
  recipientEmail     String        @unique
}
model Website {
  id                 Int        @id @default(autoincrement())
  title              String     @db.VarChar(255)
  description        String     @db.VarChar(255)
  status             Status     @default(ACTIVE)
  html               String     @db.Text
  css                String     @db.Text
  user               User?      @relation(fields: [userId], references: [id])
  userId             Int?
  visitorActivities  VisitorActivity[]
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
}

model VisitorActivity {
  id                Int             @id @default(autoincrement())
  activityType      ActivityType    
  errorActivity     ErrorActivity?
  feedbackActivity  FeedbackActivity?
  ip                String
  city              String
  region            String
  country           String
  user              User?           @relation(fields: [userId], references: [id])
  userId            Int?
  website           Website?        @relation(fields: [websiteId], references: [id])
  websiteId         Int?
  activityEventsUrl    String
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
}

model ErrorActivity {
  id                    Int               @id @default(autoincrement())
  endpoint              String
  visitorActivity       VisitorActivity   @relation(fields: [visitorActivityId], references: [id])
  visitorActivityId     Int               @unique
}

model FeedbackActivity {
  id                    Int               @id @default(autoincrement())
  rating                Int
  comment               String
  visitorActivity       VisitorActivity   @relation(fields: [visitorActivityId], references: [id])
  visitorActivityId     Int               @unique
}

model Rmr_User {
  id                    Int        @id @default(autoincrement())
  email                 String     @db.VarChar(255)
  resumePath            String
  newsletterSubsribed    Boolean    @default(false)
  createdAt             DateTime   @default(now())
  updatedAt             DateTime   @updatedAt
}