// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                 Int        @id @default(autoincrement())
  firstName          String     @db.VarChar(255)
  lastName           String     @db.VarChar(255)
  email              String     @db.VarChar(255)
  password           String     @db.VarChar(255)
  emails             Email[]
  websites           Website[]
  visitorActivities  VisitorActivity[]
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
}

enum Status {
  DRAFT
  ACTIVE
}

enum ActivityType {
  ERROR
  FEEDBACK
}

model Email {
  id              Int        @id @default(autoincrement())
  title           String     @db.VarChar(255)
  description     String     @db.VarChar(255)
  status          Status     @default(ACTIVE)
  html            String     @db.LongText
  css             String     @db.LongText
  user            User?      @relation(fields: [userId], references: [id])
  userId          Int?
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
}

model Website {
  id                 Int        @id @default(autoincrement())
  title              String     @db.VarChar(255)
  description        String     @db.VarChar(255)
  status             Status     @default(ACTIVE)
  html               String     @db.LongText
  css                String     @db.LongText
  user               User?      @relation(fields: [userId], references: [id])
  userId             Int?
  visitorActivities  VisitorActivity[]
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
}

model VisitorActivity {
  id                Int             @id @default(autoincrement())
  activityType      ActivityType    @default(FEEDBACK)
  recordedOn        DateTime        
  status            Status          @default(ACTIVE)
  html              String          @db.LongText
  css               String          @db.LongText
  user              User?           @relation(fields: [userId], references: [id])
  userId            Int?
  website           Website?        @relation(fields: [websiteId], references: [id])
  websiteId         Int?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
}